i=3
j=4
X=c(1,2,3,4,5) #creates a vector
X = rnorm(n = 100, mean = 5, sd = 0.3)
quantile(x)
quantile(X)
##Exercice 1
set.seed(1,kind="Marsaglia-Multicarry")
getwd()
data = read.csv("NuclearPowerAccidents2016.csv")
setwd("C:/Users/Max Tchibozo/Desktop/MINI PROJET MDI220")
dim(data)#216
data = read.csv("NuclearPowerAccidents2016.csv")
data = read.csv("NuclearPowerAccidents2016.csv")
dim(data)#216
names(data)
n = dim(data)[1]
costs = c()
for (i in 2:n-1){
date=as.Date(data["Date"][i,][1], format = "%m/%d/%Y")
accident_date=as.Date("03/28/1979", format = "%m/%d/%Y")
if ((date < accident_date) & !(is.na(data["Cost..millions.2013US.."][i,][1]))){
print(data["Cost..millions.2013US.."][i,][1])
costs <- append(costs,data["Cost..millions.2013US.."][i,][1])}}
length(costs)
#quantiles
n <- 100
#quantiles
n <- 100
niveaux = c()
for (i in 1:50){
niveaux <- append(costs,(2*i-1)/(2*n))
}
#quantiles
n <- 100
niveaux = c()
for (i in 1:50){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
quantiles = c()
for (niv in niveaux){
quantiles <- append(quantiles,quantile(niv))
}
quantiles
quantiles = quantile(niveaux)
quantiles
#quantiles
n <- 100
valeurs = rnorm(n = 100, mean = 0, sd = 1)
niveaux = c()
for (i in 1:50){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
quantiles = quantile(valeurs,niveaux)
quantiles
niveaux = c()
for (i in 1:50){
niveaux <- append(niveaux,(2*i-1))
}
niveaux
#quantiles
n <- 100
valeurs = rnorm(n = 100, mean = 0, sd = 1)
niveaux = c()
for (i in 1:100){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
quantiles = quantile(valeurs,niveaux)
plot(quantiles, sort(valeurs,FALSE)  , type = "l")
quantile_25 = valeurs[25]
quantile_75 = valeurs[75]
valeurs = sort(rnorm(n = 100, mean = 0, sd = 1))
quantile_25 = valeurs[25]
quantile_75 = valeurs[75]
#quantiles
n <- 100
valeurs = sort(rnorm(n = 100, mean = 0, sd = 1))
niveaux = c()
for (i in 1:100){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
quantile_25 = valeurs[25]
quantile_75 = valeurs[75]
estimate_absc =  c()
for (i in 1:100){
estimate_absc <- append(0.5/(quantile_75-quantile_25)*(valeurs[i]-quantile_25)+0.25)
}
for (i in 1:100){
estimate_absc <- append(estimate_absc,0.5/(quantile_75-quantile_25)*(valeurs[i]-quantile_25)+0.25)
}
quantiles = quantile(valeurs,niveaux)
plot(quantiles, valeurs , type = "l")
lines(quantiles, estimate_absc, col="red")
quantile_25 = valeurs[25]
quantile_75 = valeurs[75]
quantiles = quantile(valeurs,niveaux)
estimate_absc =  c()
for (i in 1:100){
estimate_absc <- append(estimate_absc,0.5/(quantile_75-quantile_25)*(quantiles[i]-quantile_25)+0.25)
}
plot(quantiles, valeurs , type = "l")
lines(quantiles, estimate_absc, col="red")
quantiles = quantile(valeurs,niveaux)
quantile_25 = quantiles[25]
quantile_75 = quantiles[75]
estimate_absc =  c()
for (i in 1:100){
estimate_absc <- append(estimate_absc,0.5/(quantile_75-quantile_25)*(quantiles[i]-quantile_25)+0.25)
}
plot(quantiles, valeurs , type = "l")
lines(quantiles, estimate_absc, col="red")
estimate_absc[25]
#quantiles
n <- 100
valeurs = sort(rnorm(n = 100, mean = 0, sd = 1))
niveaux = c()
for (i in 1:100){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
quantiles = quantile(valeurs,niveaux)
quantile_25 = valeurs[25]
quantile_75 = valeurs[75]
estimate_absc =  c()
for (i in 1:100){
estimate_absc <- append(estimate_absc,0.5/(quantile_75-quantile_25)*(valeurs[i]-quantile_25)+0.25)
}
plot(quantiles, valeurs , type = "l")
lines(quantiles, estimate_absc, col="red")
estimate_absc <- append(estimate_absc,0.5/(quantile_75-quantile_25)*(valeurs[i]-quantile_25)+valeurs[25])
for (i in 1:100){
estimate_absc <- append(estimate_absc,0.5/(quantile_75-quantile_25)*(valeurs[i]-quantile_25)+valeurs[25])
}
for (i in 1:100){
estimate_absc <- append(estimate_absc,0.5/(quantile_75-quantile_25)*(valeurs[i]-quantile_25)+valeurs[25])
}
plot(quantiles, valeurs , type = "l")
lines(quantiles, estimate_absc, col="red")
estimate_absc[25]
quantiles = quantile(valeurs,niveaux)
quantile_25 = quantiles[25]
quantile_75 = quantiles[75]
estimate_absc =  c()
for (i in 1:100){
estimate_absc <- append(estimate_absc,(valeurs[75]-valeurs[25])/(quantile_75-quantile_25)*(quantiles[i]-quantile_25)+valeurs[25])
}
plot(quantiles, valeurs , type = "l")
lines(quantiles, estimate_absc, col="red")
estimate_absc[25]
plot(quantiles, valeurs , type = "l", main = "Tracé expérimental de qqline")
lines(quantiles, estimate_absc, col="red")
#quantiles - loi exponentielle
n <- 100
valeurs = sort(rexp(n = 100, mean = 1))
valeurs = sort(rexp(n = 100, rate = 1))
niveaux = c()
for (i in 1:100){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
quantiles = quantile(valeurs,niveaux)
quantile_25 = quantiles[25]
quantile_75 = quantiles[75]
estimate_absc =  c()
for (i in 1:100){
estimate_absc <- append(estimate_absc,(valeurs[75]-valeurs[25])/(quantile_75-quantile_25)*(quantiles[i]-quantile_25)+valeurs[25])
}
plot(quantiles, valeurs , type = "l", main = "Tracé expérimental de qqline")
lines(quantiles, estimate_absc, col="red")
plot(quantiles, valeurs , type = "l", main = "Tracé expérimental de qqline - Loi exponentielle")
lines(quantiles, estimate_absc, col="red")
valeurs = sort(rexp(n = 100, rate = 10))
niveaux = c()
for (i in 1:100){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
quantiles = quantile(valeurs,niveaux)
quantile_25 = quantiles[25]
quantile_75 = quantiles[75]
estimate_absc =  c()
for (i in 1:100){
estimate_absc <- append(estimate_absc,(valeurs[75]-valeurs[25])/(quantile_75-quantile_25)*(quantiles[i]-quantile_25)+valeurs[25])
}
plot(quantiles, valeurs , type = "l", main = "Tracé expérimental de qqline - Loi exponentielle")
lines(quantiles, estimate_absc, col="red")
valeurs = sort(rexp(n = 100, rate = 1))
niveaux = c()
for (i in 1:100){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
quantiles = quantile(valeurs,niveaux)
quantile_25 = quantiles[25]
quantile_75 = quantiles[75]
estimate_absc =  c()
for (i in 1:100){
estimate_absc <- append(estimate_absc,(valeurs[75]-valeurs[25])/(quantile_75-quantile_25)*(quantiles[i]-quantile_25)+valeurs[25])
}
plot(quantiles, valeurs , type = "l", main = "Tracé expérimental de qqline - Loi exponentielle")
lines(quantiles, estimate_absc, col="red")
plot(sort(valeurs,decreasing = TRUE),matrix(0,1,100))
##Exercice 1
set.seed(1,kind="Marsaglia-Multicarry")
getwd()
setwd("C:/Users/Max Tchibozo/Desktop/MINI PROJET MDI220")
data = read.csv("NuclearPowerAccidents2016.csv")
dim(data)#216
names(data)
n = dim(data)[1]
costs = c()
for (i in 2:n-1){
date=as.Date(data["Date"][i,][1], format = "%m/%d/%Y")
accident_date=as.Date("03/28/1979", format = "%m/%d/%Y")
if ((date < accident_date) & !(is.na(data["Cost..millions.2013US.."][i,][1]))){
print(data["Cost..millions.2013US.."][i,][1])
costs <- append(costs,data["Cost..millions.2013US.."][i,][1])}}
length(costs)
#quantiles - loi normale
valeurs = sort(costs)
niveaux = c()
for (i in 1:55){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
quantiles = quantile(valeurs,niveaux)
quantiles
niveaux
n = dim(data)[1]
n <- length(costs)
#quantiles - loi normale
valeurs = sort(costs)
niveaux = c()
for (i in 1:55){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
niveaux
quantiles = quantile(valeurs,niveaux)
quantiles
valeurs_norm = rnorm(n,0,1)
valeurs_norm
##Exercice 1
set.seed(1,kind="Marsaglia-Multicarry")
getwd()
setwd("C:/Users/Max Tchibozo/Desktop/MINI PROJET MDI220")
data = read.csv("NuclearPowerAccidents2016.csv")
dim(data)#216
names(data)
n = dim(data)[1]
costs = c()
for (i in 2:n-1){
date=as.Date(data["Date"][i,][1], format = "%m/%d/%Y")
accident_date=as.Date("03/28/1979", format = "%m/%d/%Y")
if ((date < accident_date) & !(is.na(data["Cost..millions.2013US.."][i,][1]))){
print(data["Cost..millions.2013US.."][i,][1])
costs <- append(costs,data["Cost..millions.2013US.."][i,][1])}}
n <- length(costs)
#quantiles - loi normale
costs <- sort(costs)
for (i in 1:n){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
valeurs_norm = rnorm(n,0,1)
quantiles = quantile(valeurs_norm,niveaux)
quantiles
quantile_25 = quantiles[n%/%4]
quantile_75 = quantiles[3*n%/%4]
plot(quantiles, costs , type = "l", main = "Tracé expérimental de qqline")
for (i in 1:n){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
niveaux = c()
for (i in 1:n){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
valeurs_norm = rnorm(n,0,1)
##Exercice 1
set.seed(1,kind="Marsaglia-Multicarry")
getwd()
setwd("C:/Users/Max Tchibozo/Desktop/MINI PROJET MDI220")
data = read.csv("NuclearPowerAccidents2016.csv")
dim(data)#216
names(data)
n = dim(data)[1]
costs = c()
for (i in 2:n-1){
date=as.Date(data["Date"][i,][1], format = "%m/%d/%Y")
accident_date=as.Date("03/28/1979", format = "%m/%d/%Y")
if ((date < accident_date) & !(is.na(data["Cost..millions.2013US.."][i,][1]))){
print(data["Cost..millions.2013US.."][i,][1])
costs <- append(costs,data["Cost..millions.2013US.."][i,][1])}}
n <- length(costs)
#quantiles - loi normale
costs <- sort(costs)
niveaux = c()
for (i in 1:n){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
valeurs_norm = rnorm(n,0,1)
quantiles = quantile(valeurs_norm,niveaux)
quantile_25 = quantiles[n%/%4]
quantile_75 = quantiles[3*n%/%4]
plot(quantiles, costs , type = "l", main = "Tracé expérimental de qqline")
plot(quantiles, costs , main = "Tracé expérimental de qqline")
for (i in 1:n){
estimate_absc <- append(estimate_absc,a*valeurs_norm+b)
}
##Exercice 1
set.seed(1,kind="Marsaglia-Multicarry")
getwd()
setwd("C:/Users/Max Tchibozo/Desktop/MINI PROJET MDI220")
data = read.csv("NuclearPowerAccidents2016.csv")
dim(data)#216
names(data)
n = dim(data)[1]
costs = c()
for (i in 2:n-1){
date=as.Date(data["Date"][i,][1], format = "%m/%d/%Y")
accident_date=as.Date("03/28/1979", format = "%m/%d/%Y")
if ((date < accident_date) & !(is.na(data["Cost..millions.2013US.."][i,][1]))){
print(data["Cost..millions.2013US.."][i,][1])
costs <- append(costs,data["Cost..millions.2013US.."][i,][1])}}
n <- length(costs)
#quantiles - loi normale
costs <- sort(costs)
valeurs_norm = c()
for (i in 1:n){
valeurs_norm <- append(valeurs_norm,qnorm((2*i-1)/(2*n),0,1))
}
valeurs_norm_25 = qnorm(0.25)
valeurs_norm_75 = qnorm(0.75)
quantile_25 = costs[n%/%4]
quantile_75 = costs[3*n%/%4]
a=(quantile_75-quantile_25)/(valeurs_norm_75-valeurs_norm_25)
b=quantile_25-a*valeurs_norm_25
estimate_absc =  c()
for (i in 1:n){
estimate_absc <- append(estimate_absc,a*valeurs_norm+b)
}
plot(quantiles, costs , main = "Tracé expérimental de qqline")
lines(quantiles, estimate_absc, col="red")
#quantiles - loi exponentielle
n <- 100
valeurs = sort(rexp(n = 100, rate = 1))
niveaux = c()
for (i in 1:100){
niveaux <- append(niveaux,(2*i-1)/(2*n))
}
quantiles = quantile(valeurs,niveaux)
quantile_25 = quantiles[25]
quantile_75 = quantiles[75]
estimate_absc =  c()
for (i in 1:100){
estimate_absc <- append(estimate_absc,(valeurs[75]-valeurs[25])/(quantile_75-quantile_25)*(quantiles[i]-quantile_25)+valeurs[25])
}
plot(quantiles, valeurs , main = "Tracé expérimental de qqline - Loi exponentielle")
lines(quantiles, estimate_absc, col="red")
##Exercice 1
set.seed(1,kind="Marsaglia-Multicarry")
getwd()
setwd("C:/Users/Max Tchibozo/Desktop/MINI PROJET MDI220")
data = read.csv("NuclearPowerAccidents2016.csv")
dim(data)#216
names(data)
n = dim(data)[1]
costs = c()
for (i in 2:n-1){
date=as.Date(data["Date"][i,][1], format = "%m/%d/%Y")
accident_date=as.Date("03/28/1979", format = "%m/%d/%Y")
if ((date < accident_date) & !(is.na(data["Cost..millions.2013US.."][i,][1]))){
print(data["Cost..millions.2013US.."][i,][1])
costs <- append(costs,data["Cost..millions.2013US.."][i,][1])}}
n <- length(costs)
#quantiles - loi normale
costs <- sort(costs)
valeurs_norm = c()
for (i in 1:n){
valeurs_norm <- append(valeurs_norm,qnorm((2*i-1)/(2*n),0,1))
}
valeurs_norm_25 = qnorm(0.25)
valeurs_norm_75 = qnorm(0.75)
quantile_25 = costs[n%/%4]
quantile_75 = costs[3*n%/%4]
a=(quantile_75-quantile_25)/(valeurs_norm_75-valeurs_norm_25)
b=quantile_25-a*valeurs_norm_25
estimate_absc =  c()
for (i in 1:n){
estimate_absc <- append(estimate_absc,a*valeurs_norm+b)
}
plot(quantiles, costs , main = "Tracé expérimental de qqline")
lines(quantiles, estimate_absc, col="red")
Exercice 1
set.seed(1,kind="Marsaglia-Multicarry")
getwd()
setwd("C:/Users/Max Tchibozo/Desktop/MINI PROJET MDI220")
data = read.csv("NuclearPowerAccidents2016.csv")
dim(data)#216
names(data)
n = dim(data)[1]
costs = c()
for (i in 2:n-1){
date=as.Date(data["Date"][i,][1], format = "%m/%d/%Y")
accident_date=as.Date("03/28/1979", format = "%m/%d/%Y")
if ((date < accident_date) & !(is.na(data["Cost..millions.2013US.."][i,][1]))){
print(data["Cost..millions.2013US.."][i,][1])
costs <- append(costs,data["Cost..millions.2013US.."][i,][1])}}
n <- length(costs)
#quantiles - loi normale
costs <- sort(costs)
valeurs_norm = c()
for (i in 1:n){
valeurs_norm <- append(valeurs_norm,qnorm((2*i-1)/(2*n),0,1))
}
valeurs_norm_25 = qnorm(0.25)
valeurs_norm_75 = qnorm(0.75)
quantile_25 = costs[n%/%4]
quantile_75 = costs[3*n%/%4]
a=(quantile_75-quantile_25)/(valeurs_norm_75-valeurs_norm_25)
b=quantile_25-a*valeurs_norm_25
estimate_absc =  c()
for (i in 1:n){
estimate_absc <- append(estimate_absc,a*valeurs_norm[i]+b)
}
plot(quantiles, costs , main = "Tracé expérimental de qqline")
lines(quantiles, estimate_absc, col="red")
set.seed(1,kind="Marsaglia-Multicarry")
getwd()
setwd("C:/Users/Max Tchibozo/Desktop/MINI PROJET MDI220")
data = read.csv("NuclearPowerAccidents2016.csv")
dim(data)#216
names(data)
n = dim(data)[1]
costs = c()
for (i in 2:n-1){
date=as.Date(data["Date"][i,][1], format = "%m/%d/%Y")
accident_date=as.Date("03/28/1979", format = "%m/%d/%Y")
if ((date < accident_date) & !(is.na(data["Cost..millions.2013US.."][i,][1]))){
print(data["Cost..millions.2013US.."][i,][1])
costs <- append(costs,data["Cost..millions.2013US.."][i,][1])}}
n <- length(costs)
#quantiles - loi normale
costs <- sort(costs)
valeurs_norm = c()
for (i in 1:n){
valeurs_norm <- append(valeurs_norm,qnorm((2*i-1)/(2*n),0,1))
}
valeurs_norm_25 = qnorm(0.25)
valeurs_norm_75 = qnorm(0.75)
quantile_25 = costs[n%/%4]
quantile_75 = costs[3*n%/%4]
a=(quantile_75-quantile_25)/(valeurs_norm_75-valeurs_norm_25)
b=quantile_25-a*valeurs_norm_25
estimate_absc =  c()
quantiles=c(1:n)
for (i in 1:n){
estimate_absc <- append(estimate_absc,a*valeurs_norm[i]+b)
quantiles[i] <-qnorm((2*i-1)/(2*n),0,1)
}
plot(quantiles, costs , main = "Tracé expérimental de qqline")
lines(quantiles, estimate_absc, col="red")
qqnorm(costs)
qqline(costs)
qqline(costs, col ='red')
