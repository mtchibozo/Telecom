interpolLagrange(3,-1,1,100,'equi',runge,TRUE) #Pour un degre trop petit, l'interpolation est abherrante
##Degre trop eleve##
interpolLagrange(70,-1,1,100,'equi',runge,TRUE) #Pour un degre trop eleve, les erreurs deviennent trop importantes aux extremites
###Noeuds Tchebychev###
##Degre trop bas##
interpolLagrange(3,-1,1,100,'cheby',runge,TRUE) #Pour un degre trop petit, l'interpolation est abherrante
##Degre trop eleve##
interpolLagrange(16,-1,1,100,'cheby',runge,TRUE) #Pour un degre trop eleve, les erreurs deviennent trop importantes aux extremites (ici infini pour l'ordinateur!)
#Q1.b
interpolLagrange(15,-1,1,100,'cheby',runge,TRUE) #Pour ces parametres, l'interpolateur est satisfaisant
erreur_list = seq(1,1,50)
for (i in 1:50){
erreur = max(abs(interpolLagrange(i,1,2.5,10**4,'equi',evalHeight,FALSE)-evalHeight(seq(1,2.5,10**4))))
erreur_list[i] <- erreur
}
which.min(erreur_list) #rang de la methode qui minimise l'erreur d'interpolation sur evalHeight : 1
erreur_list = seq(1,1,50)
for (i in 1:50){
erreur = max(abs(interpolLagrange(i,1,2.5,10**4,'cheby',evalHeight,FALSE)-evalHeight(seq(1,2.5,10**4))))
erreur_list[i] <- erreur
}
which.min(erreur_list) #rang de la methode qui minimise l'erreur d'interpolation sur evalHeight : 1
interpolLagrange(6,-1,1,100,'cheby',runge,TRUE)
source('mesfonctions.R')
#Q1.a
###Noeuds Equidistants###
##Degre trop bas##
interpolLagrange(3,-1,1,100,'equi',runge,TRUE) #Pour un degre trop petit, l'interpolation est abherrante
##Degre trop eleve##
interpolLagrange(70,-1,1,100,'equi',runge,TRUE) #Pour un degre trop eleve, les erreurs deviennent trop importantes aux extremites
###Noeuds Tchebychev###
##Degre trop bas##
interpolLagrange(3,-1,1,100,'cheby',runge,TRUE) #Pour un degre trop petit, l'interpolation est abherrante
##Degre trop eleve##
interpolLagrange(16,-1,1,100,'cheby',runge,TRUE) #Pour un degre trop eleve, les erreurs deviennent trop importantes aux extremites (ici infini pour l'ordinateur!)
##Degre trop eleve##
interpolLagrange(16,-1,1,200,'cheby',runge,TRUE) #Pour un degre trop eleve, les erreurs deviennent trop importantes aux extremites (ici infini pour l'ordinateur!)
##Degre trop eleve##
interpolLagrange(16,-1,1,1000,'cheby',runge,TRUE) #Pour un degre trop eleve, les erreurs deviennent trop importantes aux extremites (ici infini pour l'ordinateur!)
#Q1.b
interpolLagrange(15,-1,1,6,'cheby',runge,TRUE) #Pour ces parametres, l'interpolateur est satisfaisant
#Q1.b
interpolLagrange(15,-1,1,15,'cheby',runge,TRUE) #Pour ces parametres, l'interpolateur est satisfaisant
#Q1.b
interpolLagrange(15,-1,1,1000,'cheby',runge,TRUE) #Pour ces parametres, l'interpolateur est satisfaisant
#Q1.b
interpolLagrange(15,-1,1,100,'cheby',runge,TRUE) #Pour ces parametres, l'interpolateur est satisfaisant
16
##Degre trop eleve##
interpolLagrange(16,-1,1,100,'cheby',runge,TRUE) #Pour un degre trop eleve, on n'a plus d'erreur en noeuds de Tchebychev
##Degre trop eleve##
interpolLagrange(70,-1,1,100,'cheby',runge,TRUE) #Pour un degre trop eleve, on n'a plus d'erreur en noeuds de Tchebychev
##Degre trop eleve##
interpolLagrange(70,-1,1,100,'cheby',runge,TRUE) #Pour un degre trop eleve, les erreurs deviennent trop importantes aux extremites
#Q1.b
interpolLagrange(15,-1,1,100,'cheby',runge,TRUE) #Pour ces parametres, l'interpolateur est satisfaisant
erreur_list = seq(1,1,50)
for (i in 1:50){
erreur = max(abs(interpolLagrange(i,1,2.5,10**4,'equi',evalHeight,FALSE)-evalHeight(seq(1,2.5,10**4))))
erreur_list[i] <- erreur
}
which.min(erreur_list) #rang de la methode qui minimise l'erreur d'interpolation sur evalHeight : 1
erreur_list = seq(1,1,50)
for (i in 1:50){
erreur = max(abs(interpolLagrange(i,1,2.5,10**4,'cheby',evalHeight,FALSE)-evalHeight(seq(1,2.5,10**4))))
erreur_list[i] <- erreur
}
which.min(erreur_list) #rang de la methode qui minimise l'erreur d'interpolation sur evalHeight : 1
errorRank('cheby')
errorRank = function(nodes){
erreur_list = seq(1,1,50)
for (i in 1:50){
erreur = max(abs(interpolLagrange(i,1,2.5,10**4,nodes,evalHeight,FALSE)-evalHeight(seq(1,2.5,10**4))))
erreur_list[i] <- erreur
}
c(which.min(erreur_list) , erreur_list)
}
errorRank('cheby')
errorRank('cheby')[1]
errorRank('equi')[1] #rang de la methode qui minimise l'erreur d'interpolation sur evalHeight : 1
#Q2.a
piecewiseInterpol(10,15,1,2.5,10,"equi",evalHeight,TRUE)
evalHeight(seq(1,2.5,10**4))
seq(1,2.5,10**4)
evalHeight(seq(1,2.5,length.out = 10**4))
errorRank = function(nodes){
## param @nodes : "equi" or 'cheby"
## returns the integer of the rank which minimizes the error on the evaluation of
## the evalHeight function over 10**4 points in [1,2.5]
erreur_list = seq(1,1,50) #On conjecture que le rang est inferieur ou egal a 50
for (i in 1:50){
erreur = max(abs(interpolLagrange(i,1,2.5,10**4,nodes,evalHeight,FALSE)-evalHeight(seq(1,2.5,length.out = 10**4))))
erreur_list[i] <- erreur
}
c(which.min(erreur_list) , erreur_list)
}
errorRank('equi')[1] #rang de la methode qui minimise l'erreur d'interpolation sur evalHeight : 1
errorRank('cheby')[1] #rang de la methode qui minimise l'erreur d'interpolation sur evalHeight : 1
source('mesfonctions.R')
errorRank('cheby')[1] #rang de la methode qui minimise l'erreur d'interpolation sur evalHeight : 1
M = evalErrSimpsonLoop(10**(-5))
M #Le M le plus petit qui garantit une prÃ©cision a 10^-5 pres
source('mesfonctions.R')
runge = function(x){
1/(1+5*x**2)
}
#Q1.a
###Noeuds Equidistants###
##Degre trop bas##
interpolLagrange(3,-1,1,100,'equi',runge,TRUE) #Pour un degre trop petit, l'interpolation est abherrante
##Degre trop eleve##
interpolLagrange(70,-1,1,100,'equi',runge,TRUE) #Pour un degre trop eleve, les erreurs deviennent trop importantes aux extremites
###Noeuds Tchebychev###
##Degre trop bas##
interpolLagrange(3,-1,1,100,'cheby',runge,TRUE) #Pour un degre trop petit, l'interpolation est abherrante
##Degre trop eleve##
interpolLagrange(70,-1,1,100,'cheby',runge,TRUE) #Pour un degre trop eleve, les erreurs deviennent trop importantes aux extremites
#Q1.b
interpolLagrange(15,-1,1,100,'cheby',runge,TRUE) #Pour ces parametres, l'interpolateur est satisfaisant
errorRank('equi')[1] #rang de la methode qui minimise l'erreur d'interpolation sur evalHeight : 3
errorRank('cheby')[1] #rang de la methode qui minimise l'erreur d'interpolation sur evalHeight : 36
#Q2.a
piecewiseInterpol(10,15,1,2.5,10,"equi",evalHeight,TRUE)
#Partie II : Methodes Quadrature
#les fonctions se trouvent dans mesfonctions.R
source('mesfonctions.R')
simpsonInt(1,2.5,evalHeight,100) #Une premiere estimation de I est 4.85714
evalErrSimpson(evalHeight,1,2.5,100) #L'erreur a posteriori est d'ordre 10**(-4)
evalErrSimpson(evalHeight,1,2.5,41) #Avec un budget de 41, l'erreur est d'ordre 10**(-3)
M = evalErrSimpsonLoop(10**(-5))
load('projectData.Rdata')
source('evalTools.R')
source('mesfonctions.R')
simpsonInt(1,2.5,evalHeight,100) #Une premiere estimation de I est 4.85714
richardson = function(FUN,n,t,delta){
## Calcule le tableau des differences divisees en 0 du
## polynome d'interpolation en t,delta t, ... delta^n t
## renvoie un vecteur de taille n+1:
## le vecteur des A_{k,k}, k= 0 .. n
## (pas la matrice).
## La meilleure approximation est le dernier element A[n+1].
##
lx = log(t) + log(delta) *(0:n)
x = exp(lx)
A = sapply(x,FUN)
M=matrix(ncol = n+1,nrow = n+1)
M[,1] = A
for (j in 2:(n+1)){
M[,j] = M[,j-1]
for (i in (j):(n+1)){
M[i,j] =  1/(1-delta**j)*(M[i,j-1]-d**j*M[i-1,j-1])
}
}
return(M[,n+1])
}
richardson(evalHeight,10,1.5,1/4)
richardson = function(FUN,n,t,delta){
## Calcule le tableau des differences divisees en 0 du
## polynome d'interpolation en t,delta t, ... delta^n t
## renvoie un vecteur de taille n+1:
## le vecteur des A_{k,k}, k= 0 .. n
## (pas la matrice).
## La meilleure approximation est le dernier element A[n+1].
##
lx = log(t) + log(delta) *(0:n)
x = exp(lx)
A = sapply(x,FUN)
M=matrix(ncol = n+1,nrow = n+1)
M[,1] = A
for (j in 2:(n+1)){
M[,j] = M[,j-1]
for (i in (j):(n+1)){
M[i,j] =  1/(1-delta**j)*(M[i,j-1]-delta**j*M[i-1,j-1])
}
}
return(M[,n+1])
}
richardson(evalHeight,10,1.5,1/4)
#Q2.a
piecewiseInterpol(10,15,1,2.5,10,"equi",evalHeight,TRUE)
richardson(evalHeight,10,1.5,1/4)
richardson = function(FUN,n,t,delta){
## Calcule le tableau des differences divisees en 0 du
## polynome d'interpolation en t,delta t, ... delta^n t
## renvoie un vecteur de taille n+1:
## le vecteur des A_{k,k}, k= 0 .. n
## (pas la matrice).
## La meilleure approximation est le dernier element A[n+1].
##
lx = log(t) + log(delta) *(0:n)
x = exp(lx)
A = sapply(x,FUN)
M=matrix(ncol = n+1,nrow = n+1)
M[,1] = A
for (j in 2:(n+1)){
M[,j] = M[,j-1]
for (i in (j):(n+1)){
M[i,j] =  1/(1-delta**j)*(M[i,j-1]-delta**j*M[i-1,j-1])
}
}
return(M[,n+1][n+1])
}
evalErrSimpson(evalHeight,1,2.5,M) # I = 4.825498 a 10^-5 pres
richardson(evalHeight,10,1.5,1/4)
richardson = function(FUN,n,t,delta){
## Calcule le tableau des differences divisees en 0 du
## polynome d'interpolation en t,delta t, ... delta^n t
## renvoie un vecteur de taille n+1:
## le vecteur des A_{k,k}, k= 0 .. n
## (pas la matrice).
## La meilleure approximation est le dernier element A[n+1].
##
lx = log(t) + log(delta) *(0:n)
x = exp(lx)
A = sapply(x,FUN)
M=matrix(ncol = n+1,nrow = n+1)
M[,1] = A
for (j in 2:(n+1)){
M[,j] = M[,j-1]
for (i in (j):(n+1)){
M[i,j] =  1/(1-delta**j)*(M[i,j-1]-delta**j*M[i-1,j-1])
}
}
return(diag(M))
}
richardson(evalHeight,10,1.5,1/4)
evalHeightTranslate = function(x){ return(evalHeight(x+1))}
richardson(evalHeightTranslate,10,1.5,1/4)
evalHeightTranslate = function(x){ return(evalHeight(x+1))}
n=100; t=1; delta = 1/2
A=richardson(evalHeightTranslate,n,t,delta)
lx=log(t)+log(delta)*(0:n)
x = exp(lx)
y = sapply(x,myfun)
plot(0:n,y,col='blue',type='l')
lines(0:n,A,col='red');
legend('topright',legend=c("erreur naive","erreur Richardson"),col=c('blue','red'),lwd=2)
evalHeightTranslate = function(x){ return(evalHeight(x+1))}
n=100; t=1; delta = 1/2
A=richardson(evalHeightTranslate,n,t,delta)
lx=log(t)+log(delta)*(0:n)
x = exp(lx)
y = sapply(x,myfun)
plot(0:n,y,col='blue',type='l')
lines(0:n,A,col='red');
legend('topright',legend=c("erreur naive","erreur Richardson"),col=c('blue','red'),lwd=2)
#Partie III : Methode de Richardson
source('mesfonctions.R')
load('projectData.Rdata')
source('mesfonctions.R')
source('evalTools.R')
evalHeightTranslate = function(x){ return(evalHeight(x+1))}
n=100; t=1; delta = 1/2
A=richardson(evalHeightTranslate,n,t,delta)
lx=log(t)+log(delta)*(0:n)
x = exp(lx)
y = sapply(x,myfun)
plot(0:n,y,col='blue',type='l')
lines(0:n,A,col='red');
legend('topright',legend=c("erreur naive","erreur Richardson"),col=c('blue','red'),lwd=2)
evalHeightTranslate = function(x){ return(evalHeight(x+1))}
n=100; t=1; delta = 1/2
A=richardson(evalHeightTranslate,n,t,delta)
lx=log(t)+log(delta)*(0:n)
x = exp(lx)
y = sapply(x,myfun)
y = sapply(x,evalHeightTranslate)
plot(0:n,y,col='blue',type='l')
lines(0:n,A,col='red');
legend('topright',legend=c("erreur naive","erreur Richardson"),col=c('blue','red'),lwd=2)
n=30; t=1; delta = 1/2
A=richardson(evalHeightTranslate,n,t,delta)
lx=log(t)+log(delta)*(0:n)
x = exp(lx)
y = sapply(x,evalHeightTranslate)
plot(0:n,y,col='blue',type='l')
lines(0:n,A,col='red');
legend('topright',legend=c("erreur naive","erreur Richardson"),col=c('blue','red'),lwd=2)
n=15; t=1; delta = 1/2 #Parametres : n= 30. On remarque que l'erreur naive et
A=richardson(evalHeightTranslate,n,t,delta)
lx=log(t)+log(delta)*(0:n)
x = exp(lx)
y = sapply(x,evalHeightTranslate)
plot(0:n,y,col='blue',type='l')
lines(0:n,A,col='red');
legend('topright',legend=c("erreur naive","erreur Richardson"),col=c('blue','red'),lwd=2)
refineTrapeze=function(FUN,a,b,M,q){
##' refinement of the subdivision step: incremental method
##' @param FUN : the function to be integrated
##' @param a, b : interval end points
##' @param M : initial number of intervals (each of size (b-a)/M)
##'  having been used to compute q
##' @param  q : the value of the trapezoidal  quadrature method
##'  of stepsize (b-a)/M
##' @return : the value of the quadrature for a stepsize h' = h/2
h = (b-a)/M
x = a + (2*(0:M-1))+1)*(h/2)
## complete here :
##  x : a vector of size M :
##     the additional abscissas where 'fun' must be evaluated.
y = sapply(x, FUN)
Q = h/2*sum(y) + 1/2*q##  complete here : a function of y, h and q.
return(Q)
}
source('mesfonctions.R')
simpsonInt(1,2.5,evalHeight,100) #Une premiere estimation de I est 4.85714
evalErrSimpson(evalHeight,1,2.5,100) #L'erreur a posteriori est d'ordre 10**(-4)
evalErrSimpson(evalHeight,1,2.5,41) #Avec un budget de 41, l'erreur est d'ordre 10**(-3)
M = evalErrSimpsonLoop(10**(-5))
M #Le M le plus petit qui garantit une prÃ©cision a 10^-5 pres
evalErrSimpson(evalHeight,1,2.5,M) # I = 4.825498 a 10^-5 pres
evalErrSimpsonLoop=function(precision){
M = 5
error = evalErrSimpson(evalHeight,1,2.5,M)[1]
while (error > 10**(-5)){
if (M > 1000){
break
}
M <- M*2
error = evalErrSimpson(evalHeight,1,2.5,M)[1]
}
##We now know that the precision threshold is met between M and M/2
for (i in (M/2):M){
if (evalErrSimpson(evalHeight,1,2.5,i) < precision) {
return(i)
}
return(M)
}
M = evalErrSimpsonLoop(10**(-5))
M #Le M le plus petit qui garantit une prÃ©cision a 10^-5 pres
evalErrSimpsonLoop=function(precision){
M = 5
error = evalErrSimpson(evalHeight,1,2.5,M)[1]
while (error > 10**(-5)){
if (M > 1000){
break
}
M <- M*2
error = evalErrSimpson(evalHeight,1,2.5,M)[1]
}
##We now know that the precision threshold is met between M and M/2
for (i in (M/2):M){
if (evalErrSimpson(evalHeight,1,2.5,i) < precision) {
return(i)
}
}
return(M)
}
evalErrSimpsonLoop=function(precision){
M = 5
error = evalErrSimpson(evalHeight,1,2.5,M)[1]
while (error > 10**(-5)){
if (M > 1000){
break
}
M <- M*2
error = evalErrSimpson(evalHeight,1,2.5,M)[1]
}
##We now know that the precision threshold is met between M and M/2
for (i in (M/2):M){
if (evalErrSimpson(evalHeight,1,2.5,i) < precision) {
return(i)
}
}
return(M)
}
M = evalErrSimpsonLoop(10**(-5))
M #Le M le plus petit qui garantit une prÃ©cision a 10^-5 pres est
warnings()
evalErrSimpsonLoop=function(precision){
M = 5
error = evalErrSimpson(evalHeight,1,2.5,M)[1]
while (error > 10**(-5)){
if (M > 1000){
break
}
M <- M*2
error = evalErrSimpson(evalHeight,1,2.5,M)[1]
}
##We now know that the precision threshold is met between M and M/2
for (i in (M/2):M){
if (evalErrSimpson(evalHeight,1,2.5,i)[1] < precision) {
return(i)
}
}
return(M)
}
M = evalErrSimpsonLoop(10**(-5))
M #Le M le plus petit qui garantit une prÃ©cision a 10^-5 pres est
evalErrSimpson(evalHeight,1,2.5,M) # I = 4.825498 a 10^-5 pres
evalErrSimpson(evalHeight,1,2.5,M) # I = 4.825498 a 10^-5 pres
interpolLagrange(36,1,2.5,neval,"cheby",evalHeight,TRUE)
interpolLagrange(36,1,2.5,neal,"cheby",evalHeight,TRUE)
interpolLagrange(36,1,2.5,80,"cheby",evalHeight,TRUE)
errorRank2 = function(neval){
## param @nodes : "equi" or 'cheby"
## param @type : number of evaluation points
## returns the integer of the rank which minimizes the error on the evaluation of
## the evalHeight function over 10**4 points in [1,2.5]
# Order and error under equi
erreur_equi_list = seq(1,1,length.out = 50) #On conjecture que le rang est inferieur ou egal a 50
for (i in 1:50){
erreur_equi = max(abs(interpolLagrange(i,1,2.5,neval,'equi',evalHeight,FALSE)-evalHeight(seq(1,2.5,length.out = neval))))
erreur_equi_list[i] <- erreur_equi
}
# Order and error under cheby
erreur_cheby_list = seq(1,1,length.out = 50) #On conjecture que le rang est inferieur ou egal a 50
for (i in 1:50){
erreur_cheby = max(abs(interpolLagrange(i,1,2.5,neval,'cheby',evalHeight,FALSE)-evalHeight(seq(1,2.5,length.out = neval))))
erreur_cheby_list[i] <- erreur_cheby
}
if (min(erreur_equi_list) < min(erreur_cheby_list)){
return(c(which.min(erreur_equi_list),'equi'))
}
return(c(which.min(erreur_tcheby_list) , 'cheby'))
}
#Rappel : n = 36 (en 'cheby') ou n = 3 (en 'equi')
errorRank2(10**4)
errorRank2 = function(neval){
## param @nodes : "equi" or 'cheby"
## param @type : number of evaluation points
## returns the integer of the rank which minimizes the error on the evaluation of
## the evalHeight function over 10**4 points in [1,2.5]
# Order and error under equi
erreur_equi_list = seq(1,1,length.out = 50) #On conjecture que le rang est inferieur ou egal a 50
for (i in 1:50){
erreur_equi = max(abs(interpolLagrange(i,1,2.5,neval,'equi',evalHeight,FALSE)-evalHeight(seq(1,2.5,length.out = neval))))
erreur_equi_list[i] <- erreur_equi
}
# Order and error under cheby
erreur_cheby_list = seq(1,1,length.out = 50) #On conjecture que le rang est inferieur ou egal a 50
for (i in 1:50){
erreur_cheby = max(abs(interpolLagrange(i,1,2.5,neval,'cheby',evalHeight,FALSE)-evalHeight(seq(1,2.5,length.out = neval))))
erreur_cheby_list[i] <- erreur_cheby
}
if (min(erreur_equi_list) < min(erreur_cheby_list)){
return(c(which.min(erreur_equi_list),'equi'))
}
return(c(which.min(erreur_cheby_list) , 'cheby'))
}
#Rappel : n = 36 (en 'cheby') ou n = 3 (en 'equi')
errorRank2(10**4)
#Rappel : n = 36 (en 'cheby') ou n = 3 (en 'equi')
errorRank2(80)
load('projectData.Rdata')
source('mesfonctions.R')
source('evalTools.R')
runge = function(x){
1/(1+5*x**2)
}
load('projectData.Rdata')
source('mesfonctions.R')
source('evalTools.R')
#Les fonctions se trouven
#Q1.a
###Noeuds Equidistants###
##Degre trop bas##
interpolLagrange(3,-1,1,100,'equi',runge,TRUE) #Pour un degre trop petit, l'interpolation est abherrante
##Degre trop eleve##
interpolLagrange(70,-1,1,100,'equi',runge,TRUE) #Pour un degre trop eleve, les erreurs deviennent trop importantes aux extremites
###Noeuds Tchebychev###
##Degre trop bas##
interpolLagrange(3,-1,1,100,'cheby',runge,TRUE) #Pour un degre trop petit, l'interpolation est abherrante
##Degre trop eleve##
interpolLagrange(70,-1,1,100,'cheby',runge,TRUE) #Pour un degre trop eleve, les erreurs deviennent trop importantes aux extremites
#Q1.b
interpolLagrange(15,-1,1,100,'cheby',runge,TRUE) #Pour ces parametres, l'interpolateur est satisfaisant
errorRank('equi')[1] #rang de la methode qui minimise l'erreur d'interpolation sur evalHeight : 3
errorRank('cheby')[1] #rang de la methode qui minimise l'erreur d'interpolation sur evalHeight : 36
#Q2.a
piecewiseInterpol(10,15,1,2.5,10,"equi",evalHeight,TRUE)
errorRank2(80)  #on trouve une erreur minimale pour
load('projectData.Rdata')
source('mesfonctions.R')
source('evalTools.R')
simpsonInt(1,2.5,evalHeight,100) #Une premiere estimation de I est 4.824887
evalErrSimpson(evalHeight,1,2.5,100) #L'erreur a posteriori est d'ordre 10**(-4)
evalErrSimpson(evalHeight,1,2.5,41) #Avec un budget de 41, l'erreur est d'ordre 10**(-4)
M = evalErrSimpsonLoop(10**(-5))
M #Le M le plus petit qui garantit une prÃ©cision a 10^-5 pres est M = 51
n=15; t=1; delta = 1/2
evalHeightTranslate = function(x){ return(evalHeight(x+1))}
evalErrSimpson(evalHeight,1,2.5,M) # I = 4.825031 a 10^-5 pres
load('projectData.Rdata')
source('mesfonctions.R')
source('evalTools.R')
#La methode de Richardson fonctionne en x = 0
#Il faut utiliser une fonction qui translate evalHeight de 1 : evalHeightTranslate
n=15; t=1; delta = 1/2
#Parametres : n=15. On remarque que les erreurs naives et de Richardson ne varient plus au dela de 15
#Parametres : t=1
#Parametres : delta=1/2
plotRichardson(n,t,delta)
#La methode de Richardson fonctionne en x = 0
#Il faut utiliser une fonction qui translate evalHeight de 1 : evalHeightTranslate
n=15; t=1; delta = 1/4
#Parametres : n=15. On remarque que les erreurs naives et de Richardson ne varient plus au dela de 15
#Parametres : t=1
#Parametres : delta=1/2
plotRichardson(n,t,delta)
#La methode de Richardson fonctionne en x = 0
#Il faut utiliser une fonction qui translate evalHeight de 1 : evalHeightTranslate
n=15; t=1; delta = 1/8
#Parametres : n=15. On remarque que les erreurs naives et de Richardson ne varient plus au dela de 15
#Parametres : t=1
#Parametres : delta=1/2
plotRichardson(n,t,delta)
n=15; t=1; delta = 1/2
#Parametres : n=15. On remarque que les erreurs naives et de Richardson ne varient plus au dela de 15
#Parametres : t=1
#Parametres : delta=1/2
plotRichardson(n,t,delta)
